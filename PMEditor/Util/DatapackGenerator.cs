using System.Collections.Generic;
using System.IO;
using System.Text;

namespace PMEditor.Util
{
    public class DatapackGenerator
    {

        public DirectoryInfo target;
        public string trackID;

        public DirectoryInfo FPS20 => new(target.FullName + $"\\data\\{trackID}\\functions\\20\\frames");
        public DirectoryInfo FPS60 => new(target.FullName + $"\\data\\{trackID}\\functions\\60\\frames");
        public DirectoryInfo FrameFunction => new(target.FullName + $"\\data\\{trackID}\\functions\\frame_functions");

        public DatapackGenerator(DirectoryInfo target, string trackID)
        {
            this.target = target;
            this.trackID = ToLegalIdentifier(trackID);
        }

        public void WriteFunction(int time, int frame, IEnumerable<string> lines)
        {
            File.WriteAllLines(target.FullName + $"\\data\\{trackID}\\functions\\{time}\\frames\\{frame}.mcfunction", lines);
        }

        public void WriteInitFunction(int time, IEnumerable<string> lines)
        {
            File.WriteAllLines(target.FullName + $"\\data\\{trackID}\\functions\\{time}\\init.mcfunction", lines);
        }

        public FileInfo? CreateFrameFunction(string name)
        {
            FileInfo file = new (target.FullName + $"\\data\\{trackID}\\functions\\frame_functions\\{name}.mcfunction");
            if(file.Exists)
            {
                return null;
            }
            file.Create().Close();
            return file;
        }

        public FileInfo GetFrameFunction(string name)
        {
            return new(target.FullName + $"\\data\\{trackID}\\functions\\frame_functions\\{name}.mcfunction");
        }

        public void Create(bool check = true)
        {
            if (target.Exists)
            {
                if (check) target.Delete(true); else return;
            }
            target.Create();
            //pack.mcmeta
            File.WriteAllText(target.FullName + "\\pack.mcmeta",
                "{\n" +
                "  \"pack\": {\n" +
                "    \"pack_format\": 42,\n" +
                "    \"description\": \"Generated by PMEditor\"\n" +
                "  }\n" +
                "}");
            target.CreateSubdirectory("data");
            target.CreateSubdirectory($"data\\{trackID}");
            target.CreateSubdirectory($"data\\{trackID}\\functions");
            target.CreateSubdirectory($"data\\{trackID}\\functions\\frame_functions");
            target.CreateSubdirectory($"data\\{trackID}\\functions\\20");
            target.CreateSubdirectory($"data\\{trackID}\\functions\\60");
            target.CreateSubdirectory($"data\\{trackID}\\functions\\20\\frames");
            target.CreateSubdirectory($"data\\{trackID}\\functions\\60\\frames");
        }

        public void Clear()
        {
            foreach (var file in FPS20.GetFiles())
            {
                file.Delete();
            }
            foreach (var file in FPS60.GetFiles())
            {
                file.Delete();
            }
        }

        public static DatapackGenerator CreateDatapack(DirectoryInfo target, string trackID)
        {
            var dp = new DatapackGenerator(target, trackID);
            dp.Create();
            return dp;
        }

        public static string ToLegalIdentifier(string str)
        {
            StringBuilder s = new("");
            foreach (var c in str)
            {
                if (char.IsLower(c) || char.IsDigit(c) || c == '_' || c == '-' || c == '.')
                {
                    s.Append(c);
                }
                else if (char.IsUpper(c))
                {
                    s.Append('_').Append(char.ToLower(c));
                }
                else
                {
                    s.Append('u').Append(((int)c).ToString("X"));
                }
            }
            return s.ToString();
        }
    }
}
